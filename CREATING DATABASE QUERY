CREATE DATABASE pizza_runner;

CREATE TABLE runners (
    runner_id INT,
    registration_date DATE,
    PRIMARY KEY (runner_id)
);

CREATE TABLE runner_orders (
    order_id INT,
    runner_id INT,
    pickup_time VARCHAR(19),
    distance VARCHAR(7),
    duration VARCHAR(10),
    cancellation VARCHAR(23),
    PRIMARY KEY (order_id),
    FOREIGN KEY (runner_id) REFERENCES runners(runner_id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);

CREATE TABLE pizza_names (
    pizza_id INT,
    pizza_name TEXT,
    PRIMARY KEY (pizza_id)
);

CREATE TABLE pizza_toppings (
    topping_id INT,
    topping_name TEXT,
    PRIMARY KEY (topping_id)
);

CREATE TABLE customer_orders (
    order_id INT,
    customer_id INT,
    pizza_id INT,
    exclusions VARCHAR(4),
    extras VARCHAR(4),
    order_time TIMESTAMP NULL DEFAULT NULL,
    FOREIGN KEY (pizza_id) REFERENCES pizza_names(pizza_id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE,
    FOREIGN KEY (order_id) REFERENCES runner_orders(order_id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);

CREATE TABLE pizza_recipes (
    pizza_id INT,
    toppings TEXT,
    FOREIGN KEY (pizza_id) REFERENCES customer_orders(pizza_id)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);

--------------------------------------------------------------------------------------------------
                                    DATABASE CLEANUP
--------------------------------------------------------------------------------------------------
// for customer_orders table

UPDATE customer_orders
SET exclusions = NULL
WHERE exclusions IN ('null', '');

UPDATE customer_orders
SET extras = NULL
WHERE extras IN ('null', 'NaN', '');

// for runner_orders table

UPDATE runner_orders
SET pickup_time = NULL
WHERE pickup_time IN ('null', '');

UPDATE runner_orders
SET distance = TRIM('km' FROM distance)
WHERE distance LIKE '%km';

UPDATE runner_orders
SET distance = NULL
WHERE distance IN ('null', '');

UPDATE runner_orders
SET duration = TRIM('minutes' FROM duration)
WHERE duration LIKE '%minutes';

UPDATE runner_orders
SET duration = TRIM('minute' FROM duration)
WHERE duration LIKE '%minute';

UPDATE runner_orders
SET duration = TRIM('mins' FROM duration)
WHERE duration LIKE '%mins';

UPDATE runner_orders
SET duration = NULL
WHERE duration IN ('null', '');

UPDATE runner_orders
SET cancellation = NULL
WHERE cancellation IN ('null', '', 'NaN');

ALTER TABLE runner_orders
MODIFY COLUMN pickup_time DATETIME,
MODIFY COLUMN distance FLOAT,
MODIFY COLUMN duration INT;

// for pizza_names table

ALTER TABLE pizza_names
MODIFY COLUMN pizza_name VARCHAR(50);

// for pizza_recipes table

ALTER TABLE pizza_recipes
MODIFY COLUMN toppings VARCHAR(50);

// for pizza_toppings table

ALTER TABLE pizza_toppings
MODIFY COLUMN topping_name VARCHAR(50);

--------------------------------------------------------------------------------------------------
                                    REQUIREMENT QUERIES
--------------------------------------------------------------------------------------------------

8.Make a report that generates unique customer orders (FINAL).

SELECT COUNT(DISTINCT order_id) as unique_customer_orders
FROM customer_orders

9. Each time an order is placed by a runner, there is a possibility 
that some orders are canceled or not successful. You have to create a 
report that shows the successful orders and another report that shows 
the canceled orders. For each canceled orders, it is being recorded 
in an audit tablethat contains the order id, runner id, and time and 
date of cancellation (DRAFT)

SELECT order_id, runner_id, pickup_time, cancellation
FROM runner_orders
WHERE cancellation IS NULL;

CREATE TABLE audit (
    order_id INT,
    runner_id INT,
    cancellation_time VARCHAR(19)
);

INSERT INTO audit (order_id, runner_id)
SELECT order_id, runner_id
FROM runner_orders
WHERE cancellation IS NOT NULL;

--------------------------------------------------------------------------------------------------
                                    QUESTIONS
--------------------------------------------------------------------------------------------------

- need paba e normalized ang mga tables even if dili ga gamiton ang mga values sa pag query?

- sa mga queries okay raba mag gamit ug triggers, functions, or procedures kai sa uban number ge 
ingon man explicitly nga mag gamit ug functions or procedures

- kami raba mag buot if gusto namo mag add ug tables or columns base sa query kai naay column 
nga ginarequire sa query pero wala sa pdf

- maka add ba siya anytime ug data sa mga table or fixed lang.
